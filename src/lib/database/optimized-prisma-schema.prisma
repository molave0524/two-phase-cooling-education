// Optimized Prisma Schema for User Progress Tracking
// Two-Phase Cooling Education Center

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

// ============================================================================
// CORE MODELS
// ============================================================================

model Video {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String   @db.VarChar(255)
  slug            String   @unique @db.VarChar(255)
  description     String?  @db.Text
  duration_seconds Int     @db.Integer

  // Educational categorization
  topic_category    String   @db.VarChar(50)
  difficulty_level  DifficultyLevel
  learning_objectives String[] @db.Text[]
  prerequisites     String[] @db.Uuid[]

  // Content metadata
  file_url      String   @db.VarChar(500)
  thumbnail_url String?  @db.VarChar(500)

  // Analytics (updated by triggers)
  view_count                      Int     @default(0) @db.Integer
  completion_count                Int     @default(0) @db.Integer
  average_completion_percentage   Decimal @default(0.0) @db.Decimal(5, 2)
  average_watch_time             Int     @default(0) @db.Integer

  // Publishing
  published_at DateTime? @db.Timestamptz
  is_featured  Boolean   @default(false) @db.Boolean

  // Timestamps
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz

  // Relations
  user_progress    UserProgress[]
  learning_sessions LearningSessions[]

  // Indexes for optimal query performance
  @@index([published_at(sort: Desc), is_featured], name: "idx_videos_published_featured", where: "published_at IS NOT NULL")
  @@index([topic_category, difficulty_level, published_at(sort: Desc)], name: "idx_videos_topic_difficulty", where: "published_at IS NOT NULL")
  @@index([view_count(sort: Desc), completion_count(sort: Desc), average_completion_percentage(sort: Desc)], name: "idx_videos_analytics")
  @@index([slug], name: "idx_videos_slug_lookup")
  @@map("videos")
}

model UserProgress {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id String @db.Uuid
  video_id String @db.Uuid

  // Progress tracking
  completion_percentage Decimal @default(0.0) @db.Decimal(5, 2)
  watch_time_seconds   Int     @default(0) @db.Integer
  last_position_seconds Int     @default(0) @db.Integer

  // Completion tracking
  completed_at      DateTime? @db.Timestamptz
  first_watched_at  DateTime  @default(now()) @db.Timestamptz
  last_watched_at   DateTime  @default(now()) @db.Timestamptz

  // Engagement metrics
  interaction_count Int @default(0) @db.Integer
  pause_count      Int @default(0) @db.Integer
  seek_count       Int @default(0) @db.Integer
  replay_count     Int @default(0) @db.Integer

  // Concurrent access control
  version    Int      @default(1) @db.Integer
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz

  // Relations
  video Video @relation(fields: [video_id], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([user_id, video_id], name: "unique_user_video")

  // Optimized indexes for common query patterns
  @@index([user_id, last_watched_at(sort: Desc)], name: "idx_user_progress_user_recent")
  @@index([video_id, completion_percentage, completed_at], name: "idx_user_progress_video_completion", where: "completion_percentage > 0")
  @@index([last_watched_at(sort: Desc), user_id, video_id], name: "idx_user_progress_recent_activity", where: "last_watched_at > NOW() - INTERVAL '24 hours'")
  @@index([video_id, completion_percentage], name: "idx_user_progress_completion_funnel", where: "completion_percentage > 0")
  @@index([user_id, first_watched_at, video_id], name: "idx_user_progress_learning_path")
  @@index([user_id, completion_percentage(sort: Desc)], name: "idx_user_progress_user_completion")
  @@map("user_progress")
}

model LearningSessions {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String @db.Uuid
  video_id      String @db.Uuid
  session_start DateTime @default(now()) @db.Timestamptz
  session_end   DateTime? @db.Timestamptz

  // Session metrics
  total_watch_time     Int  @default(0) @db.Integer
  max_position_reached Int  @default(0) @db.Integer
  engagement_events    Json @default("[]") @db.JsonB

  // Device and context
  device_type String? @db.VarChar(50)
  user_agent  String? @db.Text
  ip_address  String? @db.Inet

  // Session state
  is_active      Boolean  @default(true) @db.Boolean
  last_heartbeat DateTime @default(now()) @db.Timestamptz

  // Timestamps
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz

  // Relations
  video Video @relation(fields: [video_id], references: [id], onDelete: Cascade)

  // Session tracking indexes
  @@index([user_id, is_active, last_heartbeat(sort: Desc)], name: "idx_learning_sessions_active", where: "is_active = true")
  @@index([video_id, session_start(sort: Desc), total_watch_time], name: "idx_learning_sessions_video_analytics")
  @@index([session_start(sort: Desc)], name: "idx_learning_sessions_recent")
  @@index([user_id, session_start(sort: Desc)], name: "idx_learning_sessions_user_timeline")
  @@map("learning_sessions")
}

model LearningPaths {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String @db.Uuid
  path_name      String @db.VarChar(100)
  video_sequence String[] @db.Uuid[]

  // Progress tracking
  current_position     Int @default(0) @db.Integer
  videos_completed     Int @default(0) @db.Integer
  total_videos         Int @default(0) @db.Integer // Will be computed
  completion_percentage Decimal @default(0.0) @db.Decimal(5, 2) // Will be computed

  // Timing
  started_at   DateTime  @default(now()) @db.Timestamptz
  completed_at DateTime? @db.Timestamptz
  last_activity DateTime @default(now()) @db.Timestamptz

  // Timestamps
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz

  // Learning path indexes
  @@index([user_id, last_activity(sort: Desc)], name: "idx_learning_paths_user_active", where: "completed_at IS NULL")
  @@index([completion_percentage, videos_completed, total_videos], name: "idx_learning_paths_completion_analytics")
  @@index([user_id, path_name], name: "idx_learning_paths_user_path")
  @@map("learning_paths")
}

// ============================================================================
// ANALYTICS MODELS (for materialized views)
// ============================================================================

model UserProgressAnalytics {
  user_id    String @db.Uuid
  video_id   String @db.Uuid
  topic_category String @db.VarChar(50)
  difficulty_level DifficultyLevel

  // Progress metrics
  completion_percentage Decimal @db.Decimal(5, 2)
  watch_time_seconds   Int     @db.Integer
  completed_at         DateTime? @db.Timestamptz

  // Engagement metrics
  interaction_count    Int @db.Integer
  total_interactions   Int @db.Integer

  // Time metrics
  learning_duration_seconds Int @db.Integer

  // Video context
  video_duration          Int     @db.Integer
  watch_ratio_percentage  Decimal @db.Decimal(5, 2)

  // Derived insights
  progress_status String @db.VarChar(20)

  // Update tracking
  updated_at DateTime @db.Timestamptz

  @@unique([user_id, video_id], name: "idx_user_progress_analytics_unique")
  @@index([topic_category, progress_status, completion_percentage(sort: Desc)], name: "idx_user_progress_analytics_topic_progress")
  @@index([user_id, updated_at(sort: Desc), progress_status], name: "idx_user_progress_analytics_user_dashboard")
  @@index([progress_status, completion_percentage(sort: Desc)], name: "idx_user_progress_analytics_status_completion")
  @@map("user_progress_analytics")
}

// ============================================================================
// ENUMS
// ============================================================================

enum DifficultyLevel {
  beginner
  intermediate
  advanced

  @@map("difficulty_level")
}

// ============================================================================
// CUSTOM TYPES AND FUNCTIONS (via raw SQL)
// ============================================================================

// Note: These would be implemented as Prisma migrations with raw SQL
// See optimized-schema.sql for the actual implementation

// Functions available:
// - update_video_analytics() - Trigger function for real-time analytics
// - refresh_progress_analytics() - Materialized view refresh function

// Views available:
// - index_usage_stats - Monitor index performance
// - table_performance_stats - Monitor table scan efficiency