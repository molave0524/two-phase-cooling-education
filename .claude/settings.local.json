{
  "permissions": {
    "allow": [
      "Bash(npx tsc:*)",
      "Bash(Stop-Process -Force)",
      "Bash(PORT=3003 npm run dev)",
      "Bash(npm run dev:*)",
      "Bash(node:*)",
      "Bash(psql:*)",
      "Bash(docker ps:*)",
      "Bash(findstr:*)",
      "Bash(docker-compose up:*)",
      "Bash(timeout 10 bash -c \"until docker exec twophase-postgres pg_isready -U postgres 2>&1 | grep -q ''accepting connections''; do echo ''Waiting for postgres...''; sleep 1; done && echo ''PostgreSQL is ready!''\")",
      "Bash(npm run db:push:*)",
      "Bash(docker exec:*)",
      "Bash(curl:*)",
      "Bash(if exist \".next\" rd /s /q .next)",
      "Bash(python:*)",
      "Bash(taskkill:*)",
      "Bash(timeout:*)",
      "Bash(Stop-Process -Name \"node\" -Force -ErrorAction SilentlyContinue)",
      "Bash(Start-Sleep -Seconds 2)",
      "Bash(netstat:*)",
      "Bash(awk:*)",
      "Bash(xargs:*)",
      "Bash(npm:*)",
      "Bash(pkill:*)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=4096\" npm run dev)",
      "WebSearch",
      "Bash(PORT=3000 npm run dev)",
      "Bash(set GEMINI_API_KEY=AIzaSyDuy2uW9-WoY1t1fIdW-Z7TaPYd0xD0isg)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdded DevOps and DB Compare\n\n- Added DevOps Drawer with database inspection and schema comparison\n- Added schema comparison feature across environments (local, dev, uat, prod)\n- Implemented Foreign Data Wrapper (FDW) setup for cross-database comparison\n- Added database inspector with table details and row counts\n- Added environment info and health status monitoring\n- Added config status viewer for environment variables\n- Fixed AI chat error logging with detailed diagnostics\n- Fixed VideoPlayer dynamic import issue\n- Added migration scripts and stored procedures for schema comparison\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Add automated database schema validation and management\n\nOption A - Documentation & Process:\n- Created comprehensive Database Change Management guide\n- Defined workflow for schema changes across environments\n- Included PRD/Story templates for future implementations\n- Added rollback procedures and best practices\n\nOption B - Automation & Enforcement:\n- GitHub Actions workflow for schema validation on PRs\n- Automated checks for migration files when schema changes\n- Detects destructive operations and requires approval\n- CLI tool for schema comparison (npm run db:compare)\n- Validates migration file naming and ordering\n\nFeatures:\n- Blocks PRs if schema changed without migration\n- Auto-comments on PRs with schema diff summary\n- Warns about breaking changes\n- Provides pre-deployment checklist\n\nThis prevents schema drift and catches breaking changes before deployment.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git push:*)",
      "Bash(git commit --no-verify -m \"$(cat <<''EOF''\nfeat: Add automated database schema validation and management\n\nOption A - Documentation & Process:\n- Created comprehensive Database Change Management guide\n- Defined workflow for schema changes across environments\n- Included PRD/Story templates for future implementations\n- Added rollback procedures and best practices\n\nOption B - Automation & Enforcement:\n- GitHub Actions workflow for schema validation on PRs\n- Automated checks for migration files when schema changes\n- Detects destructive operations and requires approval\n- CLI tool for schema comparison (npm run db:compare)\n- Validates migration file naming and ordering\n\nFeatures:\n- Blocks PRs if schema changed without migration\n- Auto-comments on PRs with schema diff summary\n- Warns about breaking changes\n- Provides pre-deployment checklist\n- Allow console.log in scripts folder for CLI tools\n\nThis prevents schema drift and catches breaking changes before deployment.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(echo:*)",
      "Bash(echo \"DEV_POSTGRES_URL: $DEV_POSTGRES_URL:0:50...\")",
      "Bash(git rev-parse:*)",
      "Bash(git log:*)",
      "Bash(openssl rand:*)"
    ],
    "deny": [],
    "ask": []
  }
}
